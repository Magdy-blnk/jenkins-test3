pipeline {
    agent any

    environment {
        GIT_URL = "${scm.getUserRemoteConfigs()[0].getUrl()}" // Fetch repo URL
        REPO_NAME = "${GIT_URL.tokenize('/').last().replace('.git', '')}" // Extract repo name
        BRANCH_NAME = "${env.GIT_BRANCH}" // Extract branch name
    }

    stages {
        stage('Print Incoming Webhook Data') {
            steps {
                script {
                    // Fetch Webhook Payload (GitHub/Bitbucket/GitLab)
                    def payload = sh(script: "curl -s ${env.JENKINS_URL}/job/${env.JOB_NAME}/lastBuild/api/json", returnStdout: true).trim()
                    echo "ðŸ”¹ Webhook Payload: ${payload}"

                    // Parse JSON and extract repository URL & branch
                    def json = readJSON(text: payload)
                    def repoFullName = json?.actions?.find { it._class == "hudson.plugins.git.util.BuildData" }?.remoteUrls[0] ?: "unknown"
                    def branchName = json?.actions?.find { it._class == "hudson.plugins.git.util.BuildData" }?.lastBuiltRevision?.branch[0]?.name ?: "main"

                    // Extract repo name
                    def repoName = repoFullName.tokenize('/').last().replace('.git', '')

                    // Store extracted values in environment variables
                    env.REPO_NAME = repoName
                    env.GIT_URL = repoFullName
                    env.BRANCH_NAME = branchName

                    echo "âœ… Extracted Repository: ${env.REPO_NAME}"
                    echo "âœ… Extracted Branch: ${env.BRANCH_NAME}"
                }
            }
        }
            
        stage('Checkout') {
            steps {
               script {
                    echo "âœ… Checking out repository: ${REPO_NAME} on branch ${BRANCH_NAME}"
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: BRANCH_NAME]],
                        userRemoteConfigs: [[url: GIT_REMOTE_URL]]
                    ])
                }
            }
        }

        stage('Validate Triggering Branch') {
            steps {
                script {
                    // Define allowed branches per repository (any branch that contains 'main')
                    def allowedBranches = [
                        "jenkins-test"  : ~/.*main.*/,
                        "jenkins-test2" : ~/.*main.*/,
                        "jenkins-test3" : ~/.*main.*/
                    ]
                    
                    if (!allowedBranches.containsKey(REPO_NAME) || !(BRANCH_NAME in allowedBranches[REPO_NAME])) {
                        echo "Skipping pipeline execution for repo: ${REPO_NAME}, branch: ${BRANCH_NAME}"
                        currentBuild.result = 'ABORTED'
                        error "This branch is not allowed to trigger the pipeline."
                    }
                }
            }
        }


        stage('Execute Actions Based on Repo') {
            steps {
                script {
                    if (REPO_NAME == "jenkins-test3") {
                        echo "Executing action for jenkins-test3"

                        def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                            def hasMigrations = changes.split('\n').any { it =~ /\/migrations\// }

                            if (hasMigrations) {
                                echo "Migration files changed! Running necessary actions..."
                                // Trigger database migration or any other necessary action
                            } else {
                                echo "No migration files changed. Skipping migration step. for repo jenkins-test3"
                            }

                    } else if (REPO_NAME == "jenkins-test") {
                        echo "Executing action for jenkins-test"
                        def changes = sh(script: "git diff --name-only HEAD~1 HEAD", returnStdout: true).trim()
                            def hasMigrations = changes.split('\n').any { it =~ /\/migrations\// }

                            if (hasMigrations) {
                                echo "Migration files changed! Running necessary actions..."
                                // Trigger database migration or any other necessary action
                            } else {
                                echo "No migration files changed. Skipping migration step. for repo jenkins-test"
                            }
                        
                        
                    } else if (REPO_NAME == "jenkins-test2") {
                        echo "Executing action for jenkins-test2"

                    } else {
                        error "Unknown repository!"
                    }
                }
            }
        }
    }
}